
import yaml
import requests
import copy

def remove_ro_from_slots(yml):
    slots = yml['slots']
    for i in slots:
        slot = slots[i]
        if 'mappings' in slot:
            slot['mappings'] = list(filter(lambda x: not x.startswith('RO:'), slot['mappings']))

def load_yaml_from_url(url):
    """
    Helper method for grabbing yaml files
    """
    response = requests.get(url)
    if response.status_code != 200:
        raise RuntimeError(f'Unable to access Biolink Model at {url}')
    return yaml.load(response.text, Loader=yaml.FullLoader)

def deepupdate(target, src, overwrite_keys=[], list_filter= lambda x: True):
    """Deep update target dict with src
    For each k,v in src: if k doesn't exist in target, it is deep copied from
    src to target. Otherwise, if v is a list, target[k] is extended with
    src[k]. If v is a set, target[k] is updated with v, If v is a dict,
    recursively deep-update it.

    Updated to deal with yaml structure: if you have a list of yaml dicts,
    want to merge them by "name"

    If there are particular keys you want to overwrite instead of merge, send in overwrite_keys
    """
    if type(src) == dict:
        for k, v in src.items():
            if k in overwrite_keys:
                target[k] = copy.deepcopy(v)
            elif type(v) == list:
                if not k in target:
                    target[k] = list(filter(lambda x: list_filter(x), v ))
                elif len(v) and type(v[0]) == dict:
                    deepupdate(target[k], v, overwrite_keys)
                else:
                    target[k].extend(v)
                    target[k] = list(set(filter(list_filter, target[k])))  # trying to remove duplicates
            elif type(v) == dict:
                if not k in target:
                    target[k] = copy.deepcopy(v)
                else:
                    deepupdate(target[k], v, overwrite_keys)
            elif type(v) == set:
                if not k in target:
                    target[k] = v.copy()
                else:
                    target[k].update(v.copy())
            else:
                target[k] = copy.copy(v)
    else:
        # src is a list of dicts, target is a list of dicts, want to merge by name (yikes)
        src_elements = {x['name']: x for x in src}
        target_elements = {x['name']: x for x in target}
        for name in src_elements:
            if name in target_elements:
                deepupdate(target_elements[name], src_elements[name], overwrite_keys)
            else:
                target.append(src_elements[name])

def main() :
    overlay_file = load_yaml_from_url('https://raw.githubusercontent.com/NCATS-Gamma/robokop-interfaces/master/greent/conf/biolink-model_overlay.yaml')
    remove_ro_from_slots(overlay_file)

    main_file = load_yaml_from_url('https://raw.githubusercontent.com/biolink/biolink-model/master/biolink-model.yaml')
    deepupdate(main_file, overlay_file)
    with open('../greent/conf/biolink_overlay_combined.yml', 'w') as f:
        f.write('# This file was generated by robo-commons/scripts/generate_gamma_biolink.py\n')
        yaml.dump(main_file, f)

if __name__=='__main__':
    main()
